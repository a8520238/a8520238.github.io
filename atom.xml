<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lgz_blog</title>
  
  <subtitle>Hey!</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-01-16T13:52:29.637Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Lgz</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2021/01/16/hello-world/"/>
    <id>http://example.com/2021/01/16/hello-world/</id>
    <published>2021-01-16T13:52:29.637Z</published>
    <updated>2021-01-16T13:52:29.637Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>BIO_NIO_AIO总结</title>
    <link href="http://example.com/2020/10/29/BIO_NIO_AIO%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2020/10/29/BIO_NIO_AIO%E6%80%BB%E7%BB%93/</id>
    <published>2020-10-29T08:06:54.000Z</published>
    <updated>2021-01-16T13:52:29.637Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-同步异步阻塞非阻塞"><a href="#1-同步异步阻塞非阻塞" class="headerlink" title="1 同步异步阻塞非阻塞"></a>1 同步异步阻塞非阻塞</h1><h2 id="1-1-同步与异步"><a href="#1-1-同步与异步" class="headerlink" title="1.1 同步与异步"></a>1.1 同步与异步</h2><p>同步和异步描述的是一种消息通知的机制，主动等待消息返回还是被动接受消息。</p><ul><li>同步：同步IO指的是调用方通过主动等待获取调用返回的结果来获取消息通知。</li><li>异步：异步IO指的是被调用方通过某种方式（如，回调函数）来通知调用方获取消息。</li></ul><h2 id="1-2-阻塞和非阻塞"><a href="#1-2-阻塞和非阻塞" class="headerlink" title="1.2 阻塞和非阻塞"></a>1.2 阻塞和非阻塞</h2><p>阻塞和非阻塞描述的是调用方在获取消息过程中的状态，阻塞等待还是立刻返回。</p><ul><li>阻塞IO指的是调用方在获取消息的过程中会挂起阻塞，直到获取到消息。</li><li>非阻塞IO指的是调用方在获取IO的过程中会立刻返回而不进行挂起。</li></ul><h1 id="2-BIO"><a href="#2-BIO" class="headerlink" title="2 BIO"></a>2 BIO</h1><p>同步阻塞I/O模式，数据的读取写入必须阻塞在一个线程内等待其完成。</p><h2 id="2-1-传统BIO"><a href="#2-1-传统BIO" class="headerlink" title="2.1 传统BIO"></a>2.1 传统BIO</h2><p><img src="http://note.youdao.com/yws/public/resource/347e6a5d67e0fd43b8f066d5fb52a900/xmlnote/1B620F8437B04888AAB5AA2638CD9558/3792" alt="BIO"></p><blockquote><p>IO过程中涉及两个过程，到网卡的数据通过内核调用到达内核区内存，用户程序再将内核区数据拷到用户区，再读入到程序中。在上图中accept和read两个过程都是阻塞的。</p></blockquote><ul><li>采用 BIO 通信模型 的服务端，通常由一个独立的 Acceptor 线程负责监听客户端的连接。我们一般通过在while(true) 循环中服务端会调用 accept() <strong>linux native方法，建立连接，也就是把数据读到内核区</strong> 方法等待接收客户端的连接的方式监听请求，请求一旦接收到一个连接请求，就可以建立通信套接字在这个通信套接字上进行读写操作，此时不能再接收其他客户端连接请求，只能等待同当前连接的客户端的操作执行完成， 不过可以通过多线程来支持多个客户端的连接，如上图所示。</li><li>无论是NIO还是BIO，读取输入流的过程都是阻塞的，即从内存中读取数据写数据的过程。即多个socket连接只能有一个进行读写操作。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;客户端</span><br><span class="line">public class IOClient &#123;</span><br><span class="line"></span><br><span class="line">  public static void main(String[] args) &#123;</span><br><span class="line">    &#x2F;&#x2F; TODO 创建多个线程，模拟多个客户端连接服务端</span><br><span class="line">    new Thread(() -&gt; &#123;</span><br><span class="line">      try &#123;</span><br><span class="line">        Socket socket &#x3D; new Socket(&quot;127.0.0.1&quot;, 3333);</span><br><span class="line">        while (true) &#123;</span><br><span class="line">          try &#123;</span><br><span class="line">            socket.getOutputStream().write((new Date() + &quot;: hello world&quot;).getBytes());</span><br><span class="line">            Thread.sleep(2000);</span><br><span class="line">          &#125; catch (Exception e) &#123;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; catch (IOException e) &#123;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).start();</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;服务端</span><br><span class="line">public class IOServer &#123;</span><br><span class="line"></span><br><span class="line">  public static void main(String[] args) throws IOException &#123;</span><br><span class="line">    &#x2F;&#x2F; TODO 服务端处理客户端连接请求</span><br><span class="line">    ServerSocket serverSocket &#x3D; new ServerSocket(3333);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 接收到客户端连接请求之后为每个客户端创建一个新的线程进行链路处理</span><br><span class="line">    new Thread(() -&gt; &#123;</span><br><span class="line">      while (true) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">          &#x2F;&#x2F; 阻塞方法获取新的连接</span><br><span class="line">          Socket socket &#x3D; serverSocket.accept();</span><br><span class="line"></span><br><span class="line">          &#x2F;&#x2F; 每一个新的连接都创建一个线程，负责读取数据</span><br><span class="line">          new Thread(() -&gt; &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">              int len;</span><br><span class="line">              byte[] data &#x3D; new byte[1024];</span><br><span class="line">              InputStream inputStream &#x3D; socket.getInputStream();</span><br><span class="line">              &#x2F;&#x2F; 按字节流方式读取数据(阻塞)</span><br><span class="line">              while ((len &#x3D; inputStream.read(data)) !&#x3D; -1) &#123;</span><br><span class="line">                System.out.println(new String(data, 0, len));</span><br><span class="line">              &#125;</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;).start();</span><br><span class="line"></span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).start();</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-BIO改进，伪异步IO"><a href="#2-2-BIO改进，伪异步IO" class="headerlink" title="2.2 BIO改进，伪异步IO"></a>2.2 BIO改进，伪异步IO</h2><p><img src="http://note.youdao.com/yws/public/resource/347e6a5d67e0fd43b8f066d5fb52a900/xmlnote/470934604B5343609AB712EE118A9B3A/3795"></p><ul><li><p>如上图所示，每accept一个socket，就会产生一个新的线程。这样就会支持多个socket同时读写，通过线程池可以改善性能，在并发量不大的情况在可行。</p></li><li><p>对BIO进行多线程上的改进，当有新的客户端接入时，将客户端的 Socket 封装成一个Task（该任务实现java.lang.Runnable接口）投递到后端的线程池中进行处理，JDK 的线程池维护一个消息队列和 N个活跃线程，对消息队列中的任务进行处理。由于线程池可以设置消息队列的大小和最大线程数，因此，它的资源占用是可控的，无论多少个客户端并发访问，都不会导致资源的耗尽和宕机。</p></li></ul><h2 id="2-3-当客户端并发访问量增加后这种模型会出现什么问题？"><a href="#2-3-当客户端并发访问量增加后这种模型会出现什么问题？" class="headerlink" title="2.3 当客户端并发访问量增加后这种模型会出现什么问题？"></a>2.3 当客户端并发访问量增加后这种模型会出现什么问题？</h2><p>在 Java 虚拟机中，线程是宝贵的资源，线程的创建和销毁成本很高，除此之外，线程的切换成本也是很高的。尤其在 Linux 这样的操作系统中，线程本质上就是一个进程，创建和销毁线程都是重量级的系统函数。如果并发访问量增加会导致线程数急剧膨胀可能会导致线程堆栈溢出、创建新线程失败等问题，最终导致进程宕机或者僵死，不能对外提供服务。</p><h1 id="3-NIO"><a href="#3-NIO" class="headerlink" title="3 NIO"></a>3 NIO</h1><ul><li>NIO，可以看做是通过selector进行IO多路复用</li><li>Java NIO和IO之间最大的区别是IO是面向流（Stream）的，NIO是面向块（buffer）</li></ul><p><img src="http://note.youdao.com/yws/public/resource/347e6a5d67e0fd43b8f066d5fb52a900/xmlnote/7D92B0EF4C404E2DB7DC55684F75A058/3755"></p><p>如上图所示，从网卡调到内核空间的过程是非阻塞的调用函数为，epoll() 和 recvfrom() 等native方法。也就是数据准备阶段是非阻塞的。</p><p>从源码上看，select通过轮训选择有响应的socket，做读写操作是阻塞的，要注意select的过程是阻塞的，直到至少有一个已注册的事件发生。当一个或者更多的事件发生时，select() 方法将返回所发生的事件的数量,可以用分布式多线程提升性能。</p><blockquote><p>注意,为了提升性能，有时候会使用公共内存，减少数据从内核拷贝到用户区消耗的性能。</p></blockquote><p>IO流是阻塞的，NIO流是不阻塞的。也就是说select到的channel即表明数据已经全部存到buffer中，只需要从buffer中取即可。同步的含义是需要轮训判断是否读取完毕。读写过程中可以做别的事情，但如果读写的线程只有一个，性能较低，可以开多个线程进行读写。</p><p>NIO 包含下面几个核心的组件：</p><ul><li>Channel(通道)</li><li>Buffer(缓冲区)</li><li>Selector(选择器)</li></ul><p>NIO与IO区别：</p><ul><li>NIO少了1次从内核空间到用户空间的拷贝。（零拷贝）<br>ByteBuffer.allocateDirect()分配的内存使用的是本机内存而不是Java堆上的内存，和网络或者磁盘交互都在操作系统的内核空间中发生。allocateDirect()的区别在于这块内存不由java堆管理, 但仍然在同一用户进程内。</li><li>NIO以块处理数据，IO以流处理数据</li><li>非阻塞，NIO1个线程可以管理多个输入输出通道</li></ul><p>缓冲区的存在导致读入内核空间的过程是非阻塞的。缓冲区实际上是一个容器对象，更直接的说，其实就是一个数组，在NIO库中，所有数据都是用缓冲区处理的。在读取数据时，它是直接读到缓冲区中的； 在写入数据时，它也是写入到缓冲区中的；任何时候访问 NIO 中的数据，都是将它放到缓冲区中。而在面向流I/O系统中，所有数据都是直接写入或者直接将数据读取到Stream对象中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">public class NIOServer &#123;</span><br><span class="line">  public static void main(String[] args) throws IOException &#123;</span><br><span class="line">    &#x2F;&#x2F; 1. serverSelector负责轮询是否有新的连接，服务端监测到新的连接之后，不再创建一个新的线程，</span><br><span class="line">    &#x2F;&#x2F; 而是直接将新连接绑定到clientSelector上，这样就不用 IO 模型中 1w 个 while 循环在死等</span><br><span class="line">    Selector serverSelector &#x3D; Selector.open();</span><br><span class="line">    &#x2F;&#x2F; 2. clientSelector负责轮询连接是否有数据可读</span><br><span class="line">    Selector clientSelector &#x3D; Selector.open();</span><br><span class="line"></span><br><span class="line">    new Thread(() -&gt; &#123;</span><br><span class="line">      try &#123;</span><br><span class="line">        &#x2F;&#x2F; 对应IO编程中服务端启动</span><br><span class="line">        ServerSocketChannel listenerChannel &#x3D; ServerSocketChannel.open();</span><br><span class="line">        listenerChannel.socket().bind(new InetSocketAddress(3333));</span><br><span class="line">        listenerChannel.configureBlocking(false);</span><br><span class="line">        listenerChannel.register(serverSelector, SelectionKey.OP_ACCEPT);</span><br><span class="line"></span><br><span class="line">        while (true) &#123;</span><br><span class="line">          &#x2F;&#x2F; 监测是否有新的连接，这里的1指的是阻塞的时间为 1ms</span><br><span class="line">          if (serverSelector.select(1) &gt; 0) &#123;</span><br><span class="line">            Set&lt;SelectionKey&gt; set &#x3D; serverSelector.selectedKeys();</span><br><span class="line">            Iterator&lt;SelectionKey&gt; keyIterator &#x3D; set.iterator();</span><br><span class="line"></span><br><span class="line">            while (keyIterator.hasNext()) &#123;</span><br><span class="line">              SelectionKey key &#x3D; keyIterator.next();</span><br><span class="line"></span><br><span class="line">              if (key.isAcceptable()) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                  &#x2F;&#x2F; (1)</span><br><span class="line">                  &#x2F;&#x2F; 每来一个新连接，不需要创建一个线程，而是直接注册到clientSelector</span><br><span class="line">                  SocketChannel clientChannel &#x3D; ((ServerSocketChannel) key.channel()).accept();</span><br><span class="line">                  clientChannel.configureBlocking(false);</span><br><span class="line">                  clientChannel.register(clientSelector, SelectionKey.OP_READ);</span><br><span class="line">                &#125; finally &#123;</span><br><span class="line">                  keyIterator.remove();</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; catch (IOException ignored) &#123;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).start();</span><br><span class="line">    new Thread(() -&gt; &#123;</span><br><span class="line">      try &#123;</span><br><span class="line">        while (true) &#123;</span><br><span class="line">          &#x2F;&#x2F; (2) 批量轮询是否有哪些连接有数据可读，这里的1指的是阻塞的时间为 1ms</span><br><span class="line">          if (clientSelector.select(1) &gt; 0) &#123;</span><br><span class="line">            Set&lt;SelectionKey&gt; set &#x3D; clientSelector.selectedKeys();</span><br><span class="line">            Iterator&lt;SelectionKey&gt; keyIterator &#x3D; set.iterator();</span><br><span class="line"></span><br><span class="line">            while (keyIterator.hasNext()) &#123;</span><br><span class="line">              SelectionKey key &#x3D; keyIterator.next();</span><br><span class="line"></span><br><span class="line">              if (key.isReadable()) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                  SocketChannel clientChannel &#x3D; (SocketChannel) key.channel();</span><br><span class="line">                  ByteBuffer byteBuffer &#x3D; ByteBuffer.allocate(1024);</span><br><span class="line">                  &#x2F;&#x2F; (3) 面向 Buffer</span><br><span class="line">                  clientChannel.read(byteBuffer);</span><br><span class="line">                  byteBuffer.flip();</span><br><span class="line">                  System.out.println(</span><br><span class="line">                      Charset.defaultCharset().newDecoder().decode(byteBuffer).toString());</span><br><span class="line">                &#125; finally &#123;</span><br><span class="line">                  keyIterator.remove();</span><br><span class="line">                  key.interestOps(SelectionKey.OP_READ);</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; catch (IOException ignored) &#123;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).start();</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-几个有助理解的图"><a href="#4-几个有助理解的图" class="headerlink" title="4 几个有助理解的图"></a>4 几个有助理解的图</h1><p><img src="http://note.youdao.com/yws/public/resource/347e6a5d67e0fd43b8f066d5fb52a900/xmlnote/2341F85D9DAA47B0B4BA52E27C073D93/3777"><br><img src="http://note.youdao.com/yws/public/resource/347e6a5d67e0fd43b8f066d5fb52a900/xmlnote/584105CFDCB145A0A387ECB07AA5B1F7/3779"><br><img src="http://note.youdao.com/yws/public/resource/347e6a5d67e0fd43b8f066d5fb52a900/xmlnote/51931963C88A45D5968E96D61666E379/3831" alt="BIO"></p><center>BIO</center> <p><img src="http://note.youdao.com/yws/public/resource/347e6a5d67e0fd43b8f066d5fb52a900/xmlnote/F3C2D8748A7948EE85665B2489C34202/3833" alt="NIO"></p><center>NIO</center> <h1 id="5-Netty"><a href="#5-Netty" class="headerlink" title="5 Netty"></a>5 Netty</h1><p>Java 的开源框架  网络服务器客户端框架<br>使用netty的优点 java开源框架 原始nio有bug存在。</p><h2 id="5-1-Reactor线程模型"><a href="#5-1-Reactor线程模型" class="headerlink" title="5.1 Reactor线程模型"></a>5.1 Reactor线程模型</h2><ol><li>Reactor线程模型：<ul><li>单线程模型：所有的IO操作都由同一个NIO线程处理，仅限于一些小型应用场景。但在高负载、高并发等情况下使用单线程肯定就不太合理，主要是因为NIO的一个线程同时要去处理成千上万的请求 的时候，在性能上会支撑不了，即便CPU负载100%，对于海量消息的处理，编码解码以及读取、发送消息等情况，依然满足不了。</li><li>当NIO的线程负载过重之后，整体服务性能处理就会变慢，结果就是导致客户端在向服务端发起请求、链接就会超时，由于客户端一般都会有一种超时机制，反复地向服务端再次发起请求，此时就相当于陷入了死循环，更加加重了服务器负载。</li></ul></li></ol><p><img src="http://note.youdao.com/yws/public/resource/347e6a5d67e0fd43b8f066d5fb52a900/xmlnote/B625A11242CB43F083E51B956D643D32/3871"></p><ol start="2"><li>多线程模型：由一组NIO线程处理IO操作</li><li>主从线程模型：一组线程池接受请求，一组线程池处理IO</li></ol><p><img src="http://note.youdao.com/yws/public/resource/347e6a5d67e0fd43b8f066d5fb52a900/xmlnote/60BD876D2259409CB7E63A33998D2511/3869"></p><p>多线程：一组nio线程处理io操作<br><img src="http://note.youdao.com/yws/public/resource/347e6a5d67e0fd43b8f066d5fb52a900/xmlnote/997E77E15F7D45E8BC40AAEA8A73B5AB/3867"></p><p>重点概念：线程池  等待队列<br>主从线程模型：一组线程池接受请求，一组线程池，处理io</p><p><a href="https://blog.csdn.net/quxing10086/article/details/80296245">https://blog.csdn.net/quxing10086/article/details/80296245</a></p><h1 id="6-epoll（Todo）"><a href="#6-epoll（Todo）" class="headerlink" title="6 epoll（Todo）"></a>6 epoll（Todo）</h1><p><a href="https://blog.csdn.net/songchuwang1868/article/details/89877739">https://blog.csdn.net/songchuwang1868/article/details/89877739</a></p><h1 id="7-sync"><a href="#7-sync" class="headerlink" title="7 sync"></a>7 sync</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-同步异步阻塞非阻塞&quot;&gt;&lt;a href=&quot;#1-同步异步阻塞非阻塞&quot; class=&quot;headerlink&quot; title=&quot;1 同步异步阻塞非阻塞&quot;&gt;&lt;/a&gt;1 同步异步阻塞非阻塞&lt;/h1&gt;&lt;h2 id=&quot;1-1-同步与异步&quot;&gt;&lt;a href=&quot;#1-1-同步与异</summary>
      
    
    
    
    <category term="IO" scheme="http://example.com/categories/IO/"/>
    
    
  </entry>
  
  <entry>
    <title>BIO_NIO_AIO总结</title>
    <link href="http://example.com/2020/10/29/Linux%E7%9A%845%E4%B8%ADIO%E6%A8%A1%E5%9E%8B/"/>
    <id>http://example.com/2020/10/29/Linux%E7%9A%845%E4%B8%ADIO%E6%A8%A1%E5%9E%8B/</id>
    <published>2020-10-29T08:06:54.000Z</published>
    <updated>2021-01-16T13:52:29.637Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux-5中模型"><a href="#Linux-5中模型" class="headerlink" title="Linux 5中模型"></a>Linux 5中模型</h1><h2 id="1-阻塞式IO模型"><a href="#1-阻塞式IO模型" class="headerlink" title="1 阻塞式IO模型"></a>1 阻塞式IO模型</h2><p>当用户线程发出IO请求之后，内核会去查看数据是否就绪，如果没有就绪就会等待数据就绪，而用户线程就会处于阻塞状态，用户线程交出CPU。当数据就绪之后，内核会将数据拷贝到用户线程，并返回结果给用户线程，用户线程才解除block状态。</p><p>典型的阻塞IO的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data &#x3D; socket.read();</span><br></pre></td></tr></table></figure><p>如果数据没有就绪，就会一直阻塞在read方法。</p><h2 id="2-非阻塞IO模型"><a href="#2-非阻塞IO模型" class="headerlink" title="2 非阻塞IO模型"></a>2 非阻塞IO模型</h2><p>当用户线程发起一个read操作后，并不需要等待，而是马上就得到了一个结果。如果结果是一个error时，它就知道数据还没有准备好，于是它可以再次发送read操作。一旦内核中的数据准备好了，并且又再次收到了用户线程的请求，那么它马上就将数据拷贝到了用户线程，然后返回。</p><p>在非阻塞IO模型中，用户线程需要不断地询问内核数据是否就绪，也就是说非阻塞IO不会交出CPU就，而会一直占用CPU。</p><p>典型的非阻塞IO模型一般如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">while(true) &#123;</span><br><span class="line">    data &#x3D; socket.read();</span><br><span class="line">    if (data !&#x3D; error) &#123;</span><br><span class="line">        处理数据</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>非阻塞IO的缺点：在while循环中需要不断询问内核数据是否就绪，这样会导致CPU占用率非常高，因此一般很少使用这种方法来读取数据。</li></ul><h2 id="3-IO复用模型"><a href="#3-IO复用模型" class="headerlink" title="3 IO复用模型"></a>3 IO复用模型</h2><p>多路复用IO模型是目前使用得比较多的模型，JAVA NIO实际上就是多路IO复用。</p><p>在多路复用IO模型中，会有一个线程不断去轮询多个socket的状态，只有当socket真正有读写事件时，才真正调用实际的IO读写操作。因为在多路复用IO模型中，只需要使用一个线程就可以管理多个socket，系统不需要建立新的进程或者线程，只有真正的socket读写事件进行时，才会使用IO资源，所以它大大减少了资源占用。</p><p>在Java NIO中，是通过selector.select()去查询每个通道是否有到达事件，如果没有事件，则一直阻塞在那里，因此这里会导致用户线程的阻塞。</p><p>多路复用IO模式，通过一个线程就可以管理多个socket，只有当socket真正有读写事件发生才会占用资源来进行实际的读写操作。因此，多路复用IO比较适合连接数比较多的情况。对于多线程 + 阻塞IO 中，每个socket对应一个线程，这样会造成很大的资源占用，并且尤其是对于长连接来说，线程的资源一直不会释放，如果后面陆续有很多连接的话，就会造成性能上的瓶颈。</p><ul><li>多路复用IO为何比非阻塞IO模型的效率高是因为在非阻塞IO中，不断地询问socket状态时通过用户线程去进行的，而在多路复用IO中，轮询每个socket状态是内核在进行的，这个效率要比用户线程要高的多。</li><li>要注意的是，多路复用IO模型是通过轮询的方式来检测是否有事件到达，并且对到达的事件逐一进行响应。因此对于多路复用IO模型来说，一旦事件响应体很大，那么就会导致后续的事件迟迟得不到处理，并且会影响新的事件轮询。</li></ul><p>在这里使用了反应器（Reactor）设计模式，如下图：<br><img src="http://note.youdao.com/yws/public/resource/347e6a5d67e0fd43b8f066d5fb52a900/xmlnote/8A1410B068594ED1A69F9FE75623D2C9/8220"></p><p>通过Reactor的方式，可以将用户线程轮询IO操作状态的工作统一交给handle_events事件循环进行处理。用户线程注册事件处理器之后可以继续执行做其他的工作（异步），而Reactor线程负责调用内核的select函数检查socket状态。当有socket被激活时，则通知相应的用户线程（或执行用户线程的回调函数），执行handle_event进行数据读取、处理的工作。由于select函数是阻塞的，因此多路IO复用模型也被称为异步阻塞IO模型(也可以理解为同步非阻塞(数据准备到内核的过程非阻塞))。注意，这里的所说的阻塞是指select函数执行时线程被阻塞，而不是指socket。一般在使用IO多路复用模型时，socket都是设置为NONBLOCK的，不过这并不会产生影响，因为用户发起IO请求时，数据已经到达了，用户线程一定不会被阻塞。</p><p>代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">void UserEventHandler::handle_event() </span><br><span class="line">&#123;</span><br><span class="line"> </span><br><span class="line">    if(can_read(socket)) </span><br><span class="line">    &#123;</span><br><span class="line"> </span><br><span class="line">        read(socket, buffer);</span><br><span class="line"> </span><br><span class="line">        process(buffer);</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">&#123;</span><br><span class="line"> </span><br><span class="line">    Reactor.register(new UserEventHandler(socket));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Reactor::handle_events() </span><br><span class="line">&#123;</span><br><span class="line"> </span><br><span class="line">    while(1) </span><br><span class="line">    &#123;</span><br><span class="line"> </span><br><span class="line">        sockets &#x3D; select();</span><br><span class="line"> </span><br><span class="line">        for(socket in sockets) </span><br><span class="line">        &#123;</span><br><span class="line"> </span><br><span class="line">            get_event_handler(socket).handle_event();</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-信号驱动IO模型"><a href="#4-信号驱动IO模型" class="headerlink" title="4 信号驱动IO模型"></a>4 信号驱动IO模型</h2><p>在信号驱动IO模型中，当用户线程发起一个IO请求操作，会给对应的socket注册一个信号函数，然后用户线程会继续执行，当内核数据就绪时会发送一个信号给用户线程，用户线程接收到信号之后，便在信号函数中调用IO读写操作来进行实际的IO请求操作。</p><h2 id="5-异步IO模型"><a href="#5-异步IO模型" class="headerlink" title="5 异步IO模型"></a>5 异步IO模型</h2><p>异步IO模型中，用户线程发起操作之后，立刻就可以去做其他的事。而另一方面，从内核的角度，当它收到一个asynchronous之后，会立刻返回，说明read请求已经成功发起了，因此不会对用户线程产生任何block。然后内核会等待数据准备完成，然后将数据拷贝到用户线程，当这一切都完成之后，内核会给用户线程发送一个信号，告诉它read操作完成了。</p><p>也就说在异步IO模型中，IO操作的两个阶段都不会阻塞用户线程，这两个阶段都是由内核自动完成，然后发送一个信号告知用户线程操作已完成。用户线程中不需要再次调用IO函数进行具体的读写。这点是和信号驱动模型有所不同的，在信号驱动模型中，当用户线程接收到信号表示数据已经就绪，然后需要用户线程调用IO函数进行实际的读写操作；而在异步IO模型中，收到信号表示IO操作已经完成，不需要再在用户线程中调用iO函数进行实际的读写操作。</p><p>注意，异步IO是需要操作系统的底层支持，在Java 7中，提供了Asynchronous IO。</p><blockquote><p>前面四种IO模型实际上都属于同步IO，只有最后一种是真正的异步IO，因为无论是多路复用IO还是信号驱动模型，IO操作的第2个阶段都会引起用户线程阻塞，也就是内核进行数据拷贝的过程都会让用户线程阻塞(从内核read)。</p></blockquote><p><a href="https://www.cnblogs.com/dushangguzhousuoli/p/10822262.html">5种IO模型</a></p><p><a href="https://www.cnblogs.com/bitkevin/p/5724410.html">Reactor模式和Proactor模式</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Linux-5中模型&quot;&gt;&lt;a href=&quot;#Linux-5中模型&quot; class=&quot;headerlink&quot; title=&quot;Linux 5中模型&quot;&gt;&lt;/a&gt;Linux 5中模型&lt;/h1&gt;&lt;h2 id=&quot;1-阻塞式IO模型&quot;&gt;&lt;a href=&quot;#1-阻塞式IO模型&quot; c</summary>
      
    
    
    
    <category term="IO" scheme="http://example.com/categories/IO/"/>
    
    
  </entry>
  
  <entry>
    <title>select_poll_epoll</title>
    <link href="http://example.com/2020/10/29/select_poll_epoll/"/>
    <id>http://example.com/2020/10/29/select_poll_epoll/</id>
    <published>2020-10-29T08:06:54.000Z</published>
    <updated>2021-01-16T13:52:29.637Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-select-gt-时间复杂度O-n"><a href="#1-select-gt-时间复杂度O-n" class="headerlink" title="1 select==&gt;时间复杂度O(n)"></a>1 select==&gt;时间复杂度O(n)</h1><p>它仅仅知道了，有I/O事件发生了，却并不知道是哪那几个流（可能有一个，多个，甚至全部），我们只能无差别轮询所有流，找出能读出数据，或者写入数据的流，对他们进行操作。所以select具有O(n)的无差别轮询复杂度，同时处理的流越多，无差别轮询时间就越长。</p><h1 id="2-poll-gt-时间复杂度O-n"><a href="#2-poll-gt-时间复杂度O-n" class="headerlink" title="2 poll==&gt;时间复杂度O(n)"></a>2 poll==&gt;时间复杂度O(n)</h1><p>poll本质上和select没有区别，它将用户传入的数组拷贝到内核空间，然后查询每个fd对应的设备状态， 但是它没有最大连接数的限制，原因是它是基于链表来存储的.</p><h1 id="3-epoll-gt-时间复杂度O-1"><a href="#3-epoll-gt-时间复杂度O-1" class="headerlink" title="3 epoll==&gt;时间复杂度O(1)"></a>3 epoll==&gt;时间复杂度O(1)</h1><p>epoll可以理解为event poll，不同于忙轮询和无差别轮询，epoll会把哪个流发生了怎样的I/O事件通知我们。所以我们说epoll实际上是事件驱动（每个事件关联上fd）的，此时我们对这些流的操作都是有意义的。（复杂度降低到了O(1)）</p><p>select，poll，epoll都是IO多路复用的机制。I/O多路复用就通过一种机制，可以监视多个描述符，一旦某个描述符就绪（一般是读就绪或者写就绪），能够通知程序进行相应的读写操作。但select，poll，epoll本质上都是同步I/O，因为他们都需要在读写事件就绪后自己负责进行读写，也就是说这个读写过程是阻塞的，而异步I/O则无需自己负责进行读写，异步I/O的实现会负责把数据从内核拷贝到用户空间。  </p><p><a href="https://www.cnblogs.com/aspirant/p/9166944.html">select_poll_epoll区别</a></p><p>1.执行epoll_create时，创建了红黑树和就绪list链表。</p><p>2.执行epoll_ctl时，如果增加fd（socket），则检查在红黑树中是否存在，存在立即返回，不存在则添加到红黑树上，然后向内核注册回调函数，用于当中断事件来临时向准备就绪list链表中插入数据。</p><p>3.执行epoll_wait时立刻返回准备就绪链表里的数据即可。</p><p><a href="https://blog.csdn.net/weiyuefei/article/details/53006659">epoll为什么高效</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-select-gt-时间复杂度O-n&quot;&gt;&lt;a href=&quot;#1-select-gt-时间复杂度O-n&quot; class=&quot;headerlink&quot; title=&quot;1 select==&amp;gt;时间复杂度O(n)&quot;&gt;&lt;/a&gt;1 select==&amp;gt;时间复杂度O(n)</summary>
      
    
    
    
    <category term="IO" scheme="http://example.com/categories/IO/"/>
    
    
  </entry>
  
</feed>
